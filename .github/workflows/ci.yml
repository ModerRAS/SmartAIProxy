name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: |
        cd SmartAIProxy
        dotnet restore

    - name: Build
      run: |
        cd SmartAIProxy
        dotnet build --no-restore

    - name: Run unit tests
      run: |
        cd SmartAIProxy.Tests
        dotnet test --no-build --verbosity normal

    - name: Code coverage
      run: |
        cd SmartAIProxy.Tests
        dotnet test --no-build --collect:"XPlat Code Coverage" --results-directory ./TestResults
      continue-on-error: true

  docker-build:
    name: Docker Build
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        cd SmartAIProxy
        docker build -t smartaiproxy .

    - name: Test Docker image
      run: |
        cd SmartAIProxy
        docker run -d --name smartaiproxy-test -p 8080:8080 smartaiproxy
        sleep 10
        docker logs smartaiproxy-test
        docker stop smartaiproxy-test

  security-scan:
    name: Security Scan
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install security tools
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool
        dotnet tool install --global dotnet-sonarscanner

    - name: Run security analysis
      run: |
        echo "Running security analysis..."
        # This would run actual security scanning tools in a real implementation
        echo "Security scan completed"

  deploy:
    name: Deploy
    needs: [build-and-test, docker-build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Deploy notification
      run: |
        echo "Deployment would occur here in a real environment"
        echo "This could deploy to Azure, AWS, or other cloud platforms"