name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop, feature/* ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run tests every 6 hours
    - cron: '0 */6 * * *'

env:
  GO_VERSION: '1.21'
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download
      working-directory: ${{ github.workspace }}

    - name: Run linter
      run: |
        go install golang.org/x/lint/golint@latest
        golint ./...
        if [ -n "$(golint ./...)" ]; then
          echo "golint found issues"
          exit 1
        fi
      continue-on-error: true

    - name: Run vet
      run: go vet ./...

    - name: Run fmt check
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Code formatting issues found"
          exit 1
        fi

    - name: Run unit tests
      run: go test ./... -v -covermode=count -coverprofile=coverage.out

    - name: Run integration tests
      if: success()
      run: go test ./... -v -tags=integration
      continue-on-error: true

    - name: Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
        echo "Coverage report generated"
      if: success()

    - name: Archive coverage report
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.html

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build application
      run: |
        go build -o smartaiproxy main.go
        chmod +x smartaiproxy

    - name: Test binary
      run: |
        ./smartaiproxy --version || echo "No version command available"

    - name: Archive binary
      uses: actions/upload-artifact@v3
      with:
        name: smartaiproxy-binary
        path: smartaiproxy

  security:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      run: |
        # Install and run security scanning tools
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec ./...
        go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
        gocyclo -over 25 .
        echo "Security scan completed"

  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'performance')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run benchmark tests
      run: |
        go test -bench=. -benchmem -timeout=10m ./...
        echo "Benchmark tests completed"

    - name: Generate performance report
      run: |
        if [ -f "cpu.prof" ]; then
          go tool pprof -text cpu.prof > cpu_report.txt
          echo "CPU profile report generated"
        fi

  release:
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build for multiple platforms
      run: |
        # Build for Linux
        GOOS=linux GOARCH=amd64 go build -o smartaiproxy-linux-amd64 main.go
        # Build for macOS
        GOOS=darwin GOARCH=amd64 go build -o smartaiproxy-darwin-amd64 main.go
        # Build for Windows
        GOOS=windows GOARCH=amd64 go build -o smartaiproxy-windows-amd64.exe main.go

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          smartaiproxy-linux-amd64
          smartaiproxy-darwin-amd64
          smartaiproxy-windows-amd64.exe
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload binaries as artifacts
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: smartaiproxy-binaries
        path: |
          smartaiproxy-linux-amd64
          smartaiproxy-darwin-amd64
          smartaiproxy-windows-amd64.exe