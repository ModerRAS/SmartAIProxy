name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  CONFIGURATION: 'Release'
  PROJECT_NAME: 'SmartAIProxy'
  TEST_PROJECT_NAME: 'SmartAIProxy.Tests'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    outputs:
      test-status: ${{ steps.test.outcome }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore

    - name: Run unit tests
      id: unit-tests
      run: |
        cd ${{ env.TEST_PROJECT_NAME }}
        dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal --logger "trx;LogFileName=unit-tests.trx" --results-directory ../TestResults
      continue-on-error: false

    - name: Run integration tests
      id: integration-tests
      run: |
        cd ${{ env.TEST_PROJECT_NAME }}
        dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal --filter "FullyQualifiedName~Integration" --logger "trx;LogFileName=integration-tests.trx" --results-directory ../TestResults
      continue-on-error: false

    - name: Generate code coverage report
      run: |
        cd ${{ env.TEST_PROJECT_NAME }}
        dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --collect:"XPlat Code Coverage" --results-directory ../TestResults
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:../TestResults/*/coverage.cobertura.xml -targetdir:../TestResults/Coverage -reporttypes:HtmlInline_AzurePipelines;Cobertura;Badges
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: TestResults/
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./TestResults/*/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.outputs.test-status == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION_SHORT=${VERSION%.*}" >> $GITHUB_OUTPUT

    - name: Restore dependencies
      run: dotnet restore

    - name: Publish application
      run: |
        dotnet publish ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj \
          --configuration ${{ env.CONFIGURATION }} \
          --runtime linux-x64 \
          --self-contained true \
          --output ./publish \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -p:Version=${{ steps.version.outputs.VERSION }}

    - name: Build Docker image
      run: |
        docker build -t ${{ env.PROJECT_NAME }}:${{ steps.version.outputs.VERSION }} .
        docker save -o docker-image-${{ steps.version.outputs.VERSION }}.tar ${{ env.PROJECT_NAME }}:${{ steps.version.outputs.VERSION }}

    - name: Package release files
      run: |
        mkdir -p release-files
        cp -r publish/* release-files/
        cp docker-image-${{ steps.version.outputs.VERSION }}.tar release-files/
        cp appsettings.json release-files/
        cp config/smartaiproxy.yaml release-files/
        cp -r docs release-files/
        cp README.md release-files/
        cp LICENSE release-files/
        tar -czf ${{ env.PROJECT_NAME }}-${{ steps.version.outputs.VERSION }}.tar.gz -C release-files .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-files
        path: |
          ${{ env.PROJECT_NAME }}-${{ steps.version.outputs.VERSION }}.tar.gz
          docker-image-${{ steps.version.outputs.VERSION }}.tar

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: needs.test.outputs.test-status == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-files
        path: release-files

    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results
        path: test-results

    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION_SHORT=${VERSION%.*}" >> $GITHUB_OUTPUT

    - name: Generate release notes
      run: |
        # Generate release notes from git log
        echo "# Release ${{ steps.version.outputs.VERSION }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Changes" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)^..${{ github.ref }} >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Test Results" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### Unit Tests" >> RELEASE_NOTES.md
        if [ -f "test-results/unit-tests.trx" ]; then
          echo "Unit tests passed successfully." >> RELEASE_NOTES.md
        else
          echo "Unit test results not found." >> RELEASE_NOTES.md
        fi
        echo "" >> RELEASE_NOTES.md
        echo "### Integration Tests" >> RELEASE_NOTES.md
        if [ -f "test-results/integration-tests.trx" ]; then
          echo "Integration tests passed successfully." >> RELEASE_NOTES.md
        else
          echo "Integration test results not found." >> RELEASE_NOTES.md
        fi
        echo "" >> RELEASE_NOTES.md
        echo "### Code Coverage" >> RELEASE_NOTES.md
        if [ -f "test-results/Coverage/Summary.xml" ]; then
          echo "Code coverage report generated." >> RELEASE_NOTES.md
        else
          echo "Code coverage report not found." >> RELEASE_NOTES.md
        fi

    - name: Create GitHub Release
      id: create-release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        files: |
          release-files/${{ env.PROJECT_NAME }}-${{ steps.version.outputs.VERSION }}.tar.gz
          release-files/docker-image-${{ steps.version.outputs.VERSION }}.tar
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload coverage report as release asset
      if: success()
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./test-results/Coverage/Cobertura.xml
        asset_name: coverage-${{ steps.version.outputs.VERSION }}.xml
        asset_content_type: text/xml

    - name: Publish Docker image to GitHub Packages
      if: success()
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker tag ${{ env.PROJECT_NAME }}:${{ steps.version.outputs.VERSION }} ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
        docker tag ${{ env.PROJECT_NAME }}:${{ steps.version.outputs.VERSION }} ghcr.io/${{ github.repository }}:latest
        docker push ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
        docker push ghcr.io/${{ github.repository }}:latest